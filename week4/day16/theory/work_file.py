# open('file.txt', 'r')  - открытие в режиме чтения
# open('file.txt', 'w')  - открытие в режиме записи
# open('file.txt', 'a')  - открытие в режиме дозаписи

# file1 = open('/home/hello/Desktop/bootcamp/week4/day16/theory/tmakers.txt', 'r')
# data = file1.read(4)
# # file1.seek(0, 0)
# print(data)

# file1 = open('/home/hello/Desktop/bootcamp/week4/day16/theory/tmakers.txt', 'r')
# data = file1.readlines()
# print(data)


# file2 = open('/home/hello/Desktop/bootcamp/week4/day16/theory/tbootcamp.txt', 'w')
# print(file2.write('This is Makers Bootcamp\n'))
# strings = ['One\n', 'Two\n', 'Three\n']
# file2.writelines(strings)


# file2.close()
# print(file2.closed)


"""
1)  Работа с файлами. Модули
----------------------------------------------------------------------------------------------------------------------------
Файл — это всего лишь набор данных, информация хранится в "куче" данных (структура данных) и имеет название «имя файла». 
Текстовые файлы - это файлы с человекочитаемым содержимым. В них хранятся последовательности символов, которые понимает человек. 
Блокнот и другие стандартные редакторы умеют читать и редактировать этот тип файлов.

Текст может храниться в двух форматах: (.txt) — простой текст и (.rtf) — «формат обогащенного текста».

-----------------------------------------------------------------------------------------------------------------------------
2)  В Python есть встроенная функция open(). С ее помощью можно открыть любой файл на компьютере.

f = open('имя файла', 'режим') 
f - это переменная где будет хранится результат нашей работы с файлом

имя файла - имя открываемого файла
режим - режим открытия файла. Он может быть: для чтения, записи и.т.д. По умолчанию используется режим чтения r, 
если другое не указано.

Основные режимы работы с файлами:

r - только для чтения.
w - только для записи, создаст новый файл, если не найдет файл с указанным именем.
r+ - для чтения и записи.
w+ - для чтения и записи, создаст новый файл для записи, если не найдет файл с указанным именем.
a - откроет для добавления нового содержимого, создаст новый файл для записи, если не найдет файл с указанным именем.


3)  Открытие файла.
------------------------------------------------------------------------------------------------------------------------------
Давайте cоздадим текстовый файл example.txt и сохраним его в нашей рабочей папке:
Откроем файл example.txt из текущей папки в режиме чтения r:

f = open('example.txt','r')  
Если же, нам надо открыть файл из любой другой папки пропишем данный код:

f = open('/home/xyz/example.txt','r') 
где /home/xyz/ - это абсолютный путь до вашего файла(можно определить командой линукс pwd)



4)  Закрытие файла!!!
------------------------------------------------------------------------------------------------------------------------------
После завершения работы с файлом важно его закрыть, таким образом освобождаются ресурсы, убирается мусор, 
а также наша работа в файле сохраняется корректно.
Проще всего после открытия файла закрыть его, используя метод close():

file.close()
file - переменная к которой мы присвоили файл при открытии(может называться как угодно).

Давайте закроем ранее открытый файл example.txt:

f = open('example.txt','r') 
f.close() 

также можно написать try/finally, которое гарантирует, что если после открытия файла операции с ним 
приводят к исключениям, он закроется автоматически.

Например:

f = open('example.txt','r') 
try: 
  # работа с файлом 
finally: 
  f.close() 

Файл нужно открыть до инструкции try, потому что если инструкция open сама по себе вызовет ошибку, то файл не будет открываться 
для последующего закрытия.
Этот метод гарантирует, что если операции над файлом вызовут исключения, то он закроется до того как программа остановится, 
так как блок finally сработает в любом случае - если у нас выйдет исключение, либо если код в блоке try завершит работу.

---------------------------------------------------------------------------------------------------------------------------------
5)  Еще один подход — использовать инструкцию with, которая упрощает обработку исключений, а также задачи по закрытию и очистке. 
В таком случае инструкция close не нужна, потому что with автоматически закроет файл:


with open('example.txt') as f: 
   # работа с файлом 
 
В начале прописываем ключевое слово with, затем открываем файл функцией open, в скобках указываем также название файла
(если надо так же путь до файла) и режим работы(r, w, a, и.т.д).

После используем ключевое слово as которое поможет нам сохранить нашу работу в переменной, например f. Теперь мы можем 
спокойно работать с файлом не беспокоясь о том что надо его закрывать.

---------------------------------------------------------------------------------------------------------------------------------
6)  Чтение и запись файлов в Python.
---------------------------------------------------------------------------------------------------------------------------------
В Python файлы можно читать или записывать в них информацию. Если режимы а, w, r+ можно сказать разрешают 
нам проделывать определенные операции с файлом, то для того чтобы непосредственно записать или считать информацию 
нам нужно применить специальные функции.

---------------------------------------------------------------------------------------------------------------------------------
* Функция read()
---------------------------------------------------------------------------------------------------------------------------------
Функция read() используется для чтения содержимого файла после открытия его в режиме чтения r:

file.read(размер)
file - та переменная которую мы указали при открытии файла.

размер - количество символов, которые нужно прочитать, если не указать, то файл прочитается целиком.

f = open('example.txt','r') 
f.read(7)  # чтение 7 символов из example.txt 
Результат в консоли:

'This is '

Обратите внимание что функцию read мы применяем к переменной f, так как при открытии мы сохранили наш файл в переменной f.
Python прочитал 7 символов файла и если снова использовать функцию read(), то чтение начнется с 8-го символа.

f.read(7) # чтение следующих 7 символов 
' a text' 

То есть функция read при многократном применении запоминает предыдущее расположение, и где именно было остановлено чтение.
---------------------------------------------------------------------------------------------------------------------------------
***  Функция readline() и readlines(). ***
---------------------------------------------------------------------------------------------------------------------------------
Функция readline()
--------------------
    считывает одну строку из файла и возвращает ее в виде строки. 
    Строка, возвращаемая функцией readline, будет содержать в конце символ новой строки. 
    Этот метод возвращает пустую строку, когда достигает конца файла.

Создадим файл test.txt с нескольким строками:

Это первая строка. 
Это вторая строка. 
Это третья строка.

Посмотрим, как функция readline() работает в test.txt. Откроем файл функцией open, в режиме чтения ‘r’, 
и сохраним в переменной x:

x = open('test.txt','r') 
x.readline()  # прочитать первую строку  
Вывод:

Это первая строка.  

Выведем вторую строку:

x.readline(2)  # прочитать вторую строку 

Вывод:

Это вторая строка. 

Функция readlines()
-------------------
Также у нас есть функция readlines() применив ее к нашему файлу из предыдущего примера,
можно считать все строки нашего файла:

x.readlines()  # прочитать все строки 

Выводом будет:

['Это первая строка.','Это вторая строка.','Это третья строка.'] 

Метод возвращает содержимое всего файла в виде списка строк, где каждый элемент в списке представляет одну строку файла. 
Обратите внимание, как в последнем случае строки отделены друг от друга.

---------------------------------------------------------------------------------------------------------------------------------
*** Функция write() ***
---------------------------------------------------------------------------------------------------------------------------------
Функция write() используется для записи в файлы Python, открытые в режиме записи(w, w+, a):

file.write(строка)
file - переменная в которую мы задали при открытии файла строка - наш текст в строковом формате
Предположим, файла xyz.txt не существует. Он будет создан при попытке открыть его в режиме записи.

f = open('xyz.txt','w')  # открытие в режиме записи  
создается файл xyz.txt

f.write('Hello\nWorld')  # запись строки Hello World в файл, символ \n - обозначает перенос на новую строку  
В итоге если мы откроем файл xyz.txt, мы увидим такую запись:

Hello 
World 
Не забываем закрыть наш файл методом close():

f.close()  # закрытие файла 

---------------------------------------------------------------------------------------------------------------------------------
*** Функция writelines(). ***
---------------------------------------------------------------------------------------------------------------------------------
writelines() работает аналогично write(), однако в аргументы данная функция принимает уже не одну строку, 
а список состоящий из строк. Откроем предыдущий файл xyz.txt в режиме a (дозапись):

f = open('xyz.txt','a')

Теперь применим функцию writelines() к файлу f, и передадим список состоящий из строк:

f.writelines(["\nЯ учу Python!", "\nВ буткемпе Makers!"]) 
f.close() 
В итоге если мы откроем файл xyz.txt, то увидим данный текст:

Hello 
World 
Я учу Python! 
В буткемпе Makers! 

---------------------------------------------------------------------------------------------------------------------------------
7) Текущая позиция в файлах Python.
---------------------------------------------------------------------------------------------------------------------------------
В Python возможно узнать текущую позицию в файле с помощью функции tell():

f = open('example.txt')  # example.txt, который мы создали ранее 
f.read(4)  # давайте сначала перейдем к 4-й позиции This 
f.tell()  # возвращает текущую позицию 4 

Таким же образом можно изменить текущую позицию командой seek(). 

seek принимает два аргумента, 
* первый аргумент - позиция на которую мы хотим перейти, 
* второй аргумент относительно какой части файла должен двигаться наш курсор 
0 - начала, 
1 - относительно текущей позиции, 
2 - относительно конца.

Так если нам нужно перейти на самое начало нашего файла, мы передадим 0 - нулевая строка, 0 - относительно начала:

f.seek(0,0)  # вернем положение на 0 снова

"""